---
import { Descendant } from 'slate';
import { getPost } from 'src/api/post';
import { PayloadEditor } from 'src/components/editor';
import CodeBox from 'src/components/astro/CodeBox/index.astro';
import Layout from 'src/layouts/Layout.astro';
import { Category, Media, Tag } from '@payload/payload-types';

const { slug } = Astro.params;
const { data } = await getPost(slug);
const layout = data.docs[0].layout;
const { category, heroImage, tags } = data.docs[0].settings;
const alignment =
  layout[0].blockType === 'content'
    ? `${layout[0].columns[0].alignment === 'center' ? 'mx-auto' : ''}`
    : '';

const isMedia = (media: any): media is Media => {
  return media.url !== null;
};
const isCategory = (category: any): category is Category => {
  return category.name !== null;
};
const isTag = (tag: any): tag is Tag => {
  return tag.name !== null;
};
---

<Layout>
  <article class={`prose text-[inherit] ${alignment}`}>
    <div class="bg-primary pt-6 px-4 relative isolate full-width">
      <div class="h-24 w-full absolute bottom-0 bg-white -mx-4 -z-10"></div>
      <h1 class="font-canela capitalize text-white-ish">{slug}</h1>
      <div class="not-prose">
        <div class="space-x-2 space-y-2 mb-2">
          {
            category?.map(
              (category) =>
                isCategory(category) && (
                  <span class="text-brass font-bold border border-brass rounded-full px-2 py-1">
                    {category.name}
                  </span>
                )
            )
          }
          {
            tags?.map(
              (tag) =>
                isTag(tag) && (
                  <span class="text-brass font-bold">{tag.name}</span>
                )
            )
          }
        </div>
        {
          isMedia(heroImage) && (
            <img
              srcset={
                heroImage.sizes.thumbnail.url +
                ' 300w, ' +
                heroImage.sizes.hero.url +
                ' 1920w'
              }
              sizes="(max-width: 300px) 300px, (max-width: 768px) 768px, (max-width: 1024px) 1024px, 1920px"
              class="w-full rounded-md"
              loading="lazy"
              src={heroImage.sizes.thumbnail.url}
              alt={heroImage.alt}
            />
          )
        }
      </div>
    </div>
    {
      layout?.map((content) =>
        content.blockType === 'content' ? (
          <PayloadEditor
            value={content.columns[0].richText as unknown as Descendant[]}
          />
        ) : content.blockType === 'code' ? (
          <CodeBox content={content} />
        ) : null
      )
    }
  </article>
</Layout>
